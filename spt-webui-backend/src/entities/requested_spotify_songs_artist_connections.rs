//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.1

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "requested_spotify_songs_artist_connections")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub requested_spotify_song_id: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub requested_spotify_songs_artists_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::requested_spotify_songs::Entity",
        from = "Column::RequestedSpotifySongId",
        to = "super::requested_spotify_songs::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    RequestedSpotifySongs,
    #[sea_orm(
        belongs_to = "super::requested_spotify_songs_artists::Entity",
        from = "Column::RequestedSpotifySongsArtistsId",
        to = "super::requested_spotify_songs_artists::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    RequestedSpotifySongsArtists,
}

impl Related<super::requested_spotify_songs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RequestedSpotifySongs.def()
    }
}

impl Related<super::requested_spotify_songs_artists::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RequestedSpotifySongsArtists.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
