//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.1
use rocket::serde::{Deserialize, Serialize};
use rocket_okapi::okapi::schemars;
use rocket_okapi::okapi::schemars::gen::SchemaGenerator;
use rocket_okapi::okapi::schemars::schema::Schema;
use sea_orm::entity::prelude::*;


#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, schemars::JsonSchema, Serialize)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub discord_user_id: Option<i64>,
    pub discord_display_name: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::song_requests::Entity")]
    SongRequests,
}

impl Related<super::song_requests::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SongRequests.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
