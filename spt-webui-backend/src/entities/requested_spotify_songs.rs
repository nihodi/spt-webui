//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.1

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "requested_spotify_songs")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub spotify_id: String,
    pub spotify_name: String,
    pub spotify_large_image_link: String,
    pub spotify_small_image_link: String,
    pub length_ms: i32,
    pub explicit: i8,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::requested_spotify_songs_artist_connections::Entity")]
    RequestedSpotifySongsArtistConnections,
    #[sea_orm(has_many = "super::song_requests::Entity")]
    SongRequests,
}

impl Related<super::requested_spotify_songs_artist_connections::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RequestedSpotifySongsArtistConnections.def()
    }
}

impl Related<super::song_requests::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SongRequests.def()
    }
}

impl Related<super::requested_spotify_songs_artists::Entity> for Entity {
    fn to() -> RelationDef {
        super::requested_spotify_songs_artist_connections::Relation::RequestedSpotifySongsArtists
            .def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::requested_spotify_songs_artist_connections::Relation::RequestedSpotifySongs
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
